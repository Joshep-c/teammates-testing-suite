{
	"info": {
		"_postman_id": "2499b1be-276a-46ff-bd26-d1915a501ebc",
		"name": "TEAMMATES Complete API Collection",
		"description": "Colección completa con todas las 30 solicitudes y más de 92 aserciones corregidas",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46689549"
	},
	"item": [
		{
			"name": "Gestión de Administrador",
			"item": [
				{
					"name": "Get Account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Iniciando solicitud a:', '{{base_url}}/webapi/account?instructorid={{admin_user}}');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('⏱️  Tiempo de respuesta:', pm.response.responseTime + 'ms');",
									"console.log('Estado:', pm.response.status, pm.response.code);",
									"console.log('Tamaño de respuesta:', pm.response.responseSize, 'bytes');",
									"",
									"pm.test('El tiempo de respuesta es menor a 10 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test('La respuesta tiene los encabezados correctos', function () {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"  console.log('Respuesta exitosa');",
									"  pm.test('La respuesta es exitosa', function () {",
									"    pm.response.to.have.status(200);",
									"  });",
									"  ",
									"  const response = pm.response.json();",
									"  console.log('JSON de respuesta:', JSON.stringify(response, null, 2));",
									"  ",
									"  pm.test('Los datos de la cuenta están presentes', function () {",
									"    pm.expect(response).to.have.any.keys(['googleId', 'hez', 'email', 'message']);",
									"  });",
									"} else {",
									"  console.log('Respuesta de error:', pm.response.json());",
									"  pm.test('La respuesta de error tiene un mensaje', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('message');",
									"  });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/account?instructorid={{admin_user}}&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"account"
							],
							"query": [
								{
									"key": "instructorid",
									"value": "{{admin_user}}"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Accounts by Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 10 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test('La respuesta tiene los encabezados correctos', function () {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test('La respuesta es exitosa', function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('El array de cuentas está presente', function () {",
									"  const response = pm.response.json();",
									"  pm.expect(response).to.have.property('accounts');",
									"  pm.expect(response.accounts).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/accounts?useremail={{admin_user}}&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"accounts"
							],
							"query": [
								{
									"key": "useremail",
									"value": "{{admin_user}}"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Ongoing Sessions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 15 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(15000);",
									"});",
									"",
									"pm.test('La respuesta tiene los encabezados correctos', function () {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test('La respuesta es exitosa', function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Los datos de sesiones en curso están presentes', function () {",
									"  const response = pm.response.json();",
									"  pm.expect(response).to.have.any.keys(['totalOngoingSessions', 'sessions', 'message']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/sessions/ongoing?starttime=0&endtime=9999999999999&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"sessions",
								"ongoing"
							],
							"query": [
								{
									"key": "starttime",
									"value": "0"
								},
								{
									"key": "endtime",
									"value": "9999999999999"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Action Classes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 10 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test('La respuesta tiene los encabezados correctos', function () {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test('La respuesta es exitosa', function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Los datos de clases de acción están presentes', function () {",
									"  const response = pm.response.json();",
									"  pm.expect(response).to.have.property('actionClasses');",
									"  pm.expect(response.actionClasses).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/actionclass?user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"actionclass"
							],
							"query": [
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Usage Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 10 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test('La respuesta tiene los encabezados correctos', function () {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test('Validación de la estructura de la respuesta', function () {",
									"  const response = pm.response.json();",
									"  pm.expect(response).to.have.any.keys(['message', 'result', 'error']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/usagestats?starttime={{past_timestamp}}&endtime={{current_timestamp}}&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"usagestats"
							],
							"query": [
								{
									"key": "starttime",
									"value": "{{past_timestamp}}"
								},
								{
									"key": "endtime",
									"value": "{{current_timestamp}}"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Gestión de Cursos",
			"item": [
				{
					"name": "Get All Courses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 10 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test('La respuesta tiene los encabezados correctos', function () {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test('Validación de la estructura de la respuesta', function () {",
									"  if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.any.keys(['courses', 'instructorCourses', 'message']);",
									"  } else {",
									"    // Aceptar errores de validación de negocio",
									"    pm.expect([400, 500]).to.include(pm.response.code);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('message');",
									"  }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/courses?entitytype=instructor&coursestatus=active&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"courses"
							],
							"query": [
							{
									"key": "entitytype",
									"value": "instructor"
								},
								{
									"key": "coursestatus",
									"value": "active"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Course Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 10 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test('La respuesta tiene los encabezados correctos', function () {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test('La respuesta es exitosa', function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Los detalles del curso están presentes', function () {",
									"  const response = pm.response.json();",
									"  pm.expect(response).to.have.any.keys(['courseId', 'courseName', 'institute', 'message']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/course?courseid=jcordovas.uns-demo&entitytype=instructor&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"course"
							],
							"query": [
								{
									"key": "courseid",
									"value": "jcordovas.uns-demo"
								},
								{
									"key": "entitytype",
									"value": "instructor"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Gestión de Estudiantes",
			"item": [
				{
					"name": "Get Students",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 10 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test('La respuesta tiene los encabezados correctos', function () {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test('La respuesta es exitosa', function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Los datos de los estudiantes están presentes', function () {",
									"  const response = pm.response.json();",
									"  pm.expect(response).to.have.any.keys(['students', 'message', 'requestId']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/students?courseid=jcordovas.uns-demo&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"students"
							],
							"query": [
								{
									"key": "courseid",
									"value": "jcordovas.uns-demo"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Students",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 10 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test('Validación de la estructura de la respuesta', function () {",
									"  const contentType = pm.response.headers.get('Content-Type');",
									"  ",
									"  if (contentType && contentType.includes('application/json')) {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.any.keys(['searchResults', 'students', 'message']);",
									"  } else {",
									"    // Manejar respuestas HTML",
									"    pm.expect([200, 400, 500]).to.include(pm.response.code);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/search/students?searchkey=test&user={{admin_user}}&entitytype=admin",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"search",
								"students"
							],
							"query": [
								{
									"key": "searchkey",
									"value": "test"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								},
								{
									"key": "entitytype",
									"value": "admin"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Gestión de Instructores",
			"item": [
				{
					"name": "Get Instructors (Relaxed Timeout)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 20 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(20000);",
									"});",
									"",
									"pm.test('La respuesta tiene los encabezados correctos', function () {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test('La respuesta es exitosa', function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Los datos de los instructores están presentes', function () {",
									"  const response = pm.response.json();",
									"  pm.expect(response).to.have.any.keys(['instructors', 'message', 'requestId']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/instructors?courseid=jcordovas.uns-demo&intent=FULL_DETAIL&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"instructors"
							],
							"query": [
								{
									"key": "courseid",
									"value": "jcordovas.uns-demo"
								},
								{
									"key": "intent",
									"value": "FULL_DETAIL"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Gestión de Sesiones de Retroalimentación",
			"item": [
				{
					"name": "Get All Sessions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 10 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test('La respuesta tiene los encabezados correctos', function () {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test('Validación de la estructura de la respuesta', function () {",
									"  if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.any.keys(['feedbackSessions', 'sessions', 'message']);",
									"  } else {",
									"    pm.expect(pm.response.json()).to.have.property('message');",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/sessions?courseid=jcordovas.uns-demo&entitytype=instructor&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"sessions"
							],
							"query": [
								{
									"key": "courseid",
									"value": "jcordovas.uns-demo"
								},
								{
									"key": "entitytype",
									"value": "instructor"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Session Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 10 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test('Validación de la estructura de la respuesta', function () {",
									"  if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.any.keys(['feedbackSessionName', 'courseId', 'message']);",
									"  } else {",
									"    pm.expect(pm.response.json()).to.have.property('message');",
									"  }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/session?courseid=jcordovas.uns-demo&fsname=First team feedback session (percentage-based)&intent=INSTRUCTOR_RESULT&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"session"
							],
							"query": [
								{
									"key": "courseid",
									"value": "jcordovas.uns-demo"
								},
								{
									"key": "fsname",
									"value": "First team feedback session (percentage-based)"
								},
								{
									"key": "intent",
									"value": "INSTRUCTOR_RESULT"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Feedback Session",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate valid timestamps for session creation",
									"const now = new Date();",
									"// const submissionStart = now + (1000 * 60 * 60); // 1 hour from now",
									"// const submissionEnd = now + (1000 * 60 * 60 * 24 * 7); // 1 week from now",
									"",
									"// Round to next exact hour (e.g., if it's 13:22 → 14:00)",
									"const nextHour = new Date(now);",
									"nextHour.setHours(now.getHours() + 1);",
									"nextHour.setMinutes(0, 0, 0);",
									"",
									"const submissionStart = nextHour.getTime();",
									"const submissionEnd = submissionStart + (1000 * 60 * 60 * 24 * 7); // 1 week from submissionStart",
									"",
									"// Create valid JSON body",
									"const requestBody = {",
									"  \"courseid\": \"jcordovas.uns-demo\",",
									"  \"feedbackSessionName\": `Integration Test Session ${Math.floor(Math.random() * 1000)}`,",
									"  \"instructions\": \"Please provide your feedback for this integration test\",",
									"  \"submissionStartTimestamp\": submissionStart,",
									"  \"submissionEndTimestamp\": submissionEnd,",
									"  \"gracePeriod\": 15,",
									"  \"sessionVisibleFromTime\": now,",
									"  \"sessionVisibleSetting\": \"AT_OPEN\",",
									"  \"responseVisibleSetting\": \"LATER\",",
									"  \"resultsVisibleFromTime\": submissionEnd + (1000 * 60 * 60) // 1 hour after end",
									"};",
									"",
									"pm.request.body.raw = JSON.stringify(requestBody, null, 2);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 10 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test('La respuesta tiene los encabezados correctos', function () {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test('Respuesta de creación de sesión', function () {",
									"  pm.expect([200, 201, 400, 409]).to.include(pm.response.code);",
									"});",
									"",
									"pm.test('Marca de tiempo en el mensaje de respuesta', function () {",
									"  const response = pm.response.json();",
									"  pm.expect(response).to.have.property('feedbackSessionName');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/webapi/session?user={{admin_user}}&courseid=jcordovas.uns-demo",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"session"
							],
							"query": [
								{
									"key": "user",
									"value": "{{admin_user}}"
								},
								{
									"key": "courseid",
									"value": "jcordovas.uns-demo"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Bad Feedback Session",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate valid timestamps for session creation",
									"const now = Date.now();",
									"const submissionStart = now + (1000 * 60 * 60); // 1 hour from now",
									"const submissionEnd = now + (1000 * 60 * 60 * 24 * 7); // 1 week from now",
									"",
									"// Create valid JSON body",
									"const requestBody = {",
									"  \"courseid\": \"jcordovas.uns-demo\",",
									"  \"feedbackSessionName\": `Integration Test Session ${Math.floor(Math.random() * 1000)}`,",
									"  \"instructions\": \"Please provide your feedback for this integration test\",",
									"  \"submissionStartTimestamp\": submissionStart,",
									"  \"submissionEndTimestamp\": submissionEnd,",
									"  \"gracePeriod\": 15,",
									"  \"sessionVisibleFromTime\": now,",
									"  \"sessionVisibleSetting\": \"AT_OPEN\",",
									"  \"responseVisibleSetting\": \"LATER\",",
									"  \"resultsVisibleFromTime\": submissionEnd + (1000 * 60 * 60) // 1 hour after end",
									"};",
									"",
									"pm.request.body.raw = JSON.stringify(requestBody, null, 2);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 10 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test('La respuesta tiene los encabezados correctos', function () {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test('Respuesta de creación de sesión', function () {",
									"  pm.expect([200, 201, 400, 409]).to.include(pm.response.code);",
									"});",
									"",
									"pm.test('La respuesta de error tiene un mensaje', function () {",
									"  const response = pm.response.json();",
									"  pm.expect(response).to.have.property('message');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fsname\": \"{{fsname}}\",\r\n  \"instructions\": \"{{instructions}}\",\r\n  \"submissionStartTimestamp\": {{submissionStartTimestamp}},\r\n  \"submissionEndTimestamp\": {{submissionEndTimestamp}},\r\n  \"gracePeriod\": {{gracePeriod}},\r\n  \"sessionVisibleFromTime\": {{sessionVisibleFromTime}},\r\n  \"resultsVisibleFromTime\": {{resultsVisibleFromTime}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/webapi/session?user={{admin_user}}&courseid=jcordovas.uns-demo",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"session"
							],
							"query": [
								{
									"key": "user",
									"value": "{{admin_user}}"
								},
								{
									"key": "courseid",
									"value": "jcordovas.uns-demo"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Session Stats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 10 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test('Validación de la estructura de la respuesta', function () {",
									"  if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.any.keys(['expectedTotal', 'submittedTotal', 'message']);",
									"  } else {",
									"    pm.expect(pm.response.json()).to.have.property('message');",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/session/stats?courseid=jcordovas.uns-demo&fsname=First team feedback session (percentage-based)&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"session",
								"stats"
							],
							"query": [
								{
									"key": "courseid",
									"value": "jcordovas.uns-demo"
								},
								{
									"key": "fsname",
									"value": "First team feedback session (percentage-based)"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Gestión de Preguntas y Respuestas",
			"item": [
				{
					"name": "Get Questions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 10 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test('Validación de la estructura de la respuesta', function () {",
									"  if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.any.keys(['questions', 'message']);",
									"  } else {",
									"    pm.expect(pm.response.json()).to.have.property('message');",
									"  }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/questions?courseid=jcordovas.uns-demo&fsname=First team feedback session (percentage-based)&intent=INTENT_NOT_DEFINED&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"questions"
							],
							"query": [
								{
									"key": "courseid",
									"value": "jcordovas.uns-demo"
								},
								{
									"key": "fsname",
									"value": "First team feedback session (percentage-based)"
								},
								{
									"key": "intent",
									"value": "INTENT_NOT_DEFINED"
								},
								{
									"key": "intent",
									"value": "STUDENT_SUBMISSION",
									"disabled": true
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Text Question",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 10 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test('Respuesta de creación de pregunta', function () {",
									"  pm.expect([200, 201, 400, 409, 500]).to.include(pm.response.code);",
									"});",
									"",
									"pm.test('Validación de la estructura de la respuesta', function () {",
									"  if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.any.keys(['feedbackQuestionId', 'questionNumber', 'message']);",
									"  } else {",
									"    pm.expect(pm.response.json()).to.have.property('message');",
									"  }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									"// const requestBody = {\r",
									"//     \"feedbackQuestionId\": `TestQuestion${Math.floor(Math.random() * 1000)}`,\r",
									"//   \"questionBrief\": `Test question ${Math.floor(Math.random() * 1000)}`,\r",
									"//   \"giverType\": \"STUDENTS\",\r",
									"//   \"numberOfEntitiesToGiveFeedbackToSetting\": \"UNLIMITED\",\r",
									"//   \"questionDetails\": {\r",
									"//     \"questionText\": \"What did you learn from this integration test?\",\r",
									"//     \"questionDescription\": \"Please provide detailed feedback\",\r",
									"//     \"shouldAllowRichText\": true\r",
									"//   },\r",
									"//   \"questionType\": \"TEXT\",\r",
									"//   \"questionNumber\": 16,\r",
									"//   \"recipientType\": \"OWN_TEAM_MEMBERS\",\r",
									"//   \"showResponsesTo\": [\"RECEIVER\"],\r",
									"//   \"showGiverNameTo\": [\"RECEIVER\"],\r",
									"//   \"showRecipientNameTo\": [\"RECEIVER\"]\r",
									"// }\r",
									"\r",
									"const requestBody = {\r",
									"  \"giverType\": \"STUDENTS\",\r",
									"  \"numberOfEntitiesToGiveFeedbackToSetting\": \"UNLIMITED\",\r",
									"  \"questionBrief\": `Test question ${Math.floor(Math.random() * 1000)}`,\r",
									"  \"questionDescription\": \"\",\r",
									"  \"questionDetails\": {\r",
									"    \"shouldAllowRichText\": true,\r",
									"    \"questionType\": \"TEXT\",\r",
									"    \"questionText\": \"New question\"\r",
									"  },\r",
									"  \"questionText\": \"New question\",\r",
									"  \"questionType\": \"TEXT\",\r",
									"  \"shouldAllowRichText\": true,\r",
									"  \"questionNumber\": 17,\r",
									"  \"recipientType\": \"OWN_TEAM_MEMBERS\",\r",
									"  \"showGiverNameTo\": [\"INSTRUCTORS\"],\r",
									"  \"showRecipientNameTo\": [\"RECIPIENT\", \"INSTRUCTORS\"],\r",
									"  \"showResponsesTo\": [\"RECIPIENT\", \"GIVER_TEAM_MEMBERS\", \"INSTRUCTORS\"]\r",
									"};\r",
									"\r",
									"pm.request.body.raw = JSON.stringify(requestBody, null, 2);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/webapi/question?courseid=jcordovas.demo-101&fsname=Test-example&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"question"
							],
							"query": [
								{
									"key": "courseid",
									"value": "jcordovas.demo-101"
								},
								{
									"key": "fsname",
									"value": "Test-example"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Responses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 10 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test('Validación de la estructura de la respuesta', function () {",
									"  if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.any.keys(['responses', 'message']);",
									"  } else {",
									"    pm.expect(pm.response.json()).to.have.property('message');",
									"  }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/responses?courseid=jcordovas.uns-demo&fsname=First team feedback session (percentage-based)&questionid=1&intent=STUDENT_SUBMISSION&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"responses"
							],
							"query": [
								{
									"key": "courseid",
									"value": "jcordovas.uns-demo"
								},
								{
									"key": "fsname",
									"value": "First team feedback session (percentage-based)"
								},
								{
									"key": "questionid",
									"value": "ahlzfm1vZGVybi12b3J0ZXgtNDYzMjE3LWg5ch0LEhBGZWVkYmFja1F1ZXN0aW9uGICAgPjChJAKDA",
									"disabled": true
								},
								{
									"key": "questionid",
									"value": "1"
								},
								{
									"key": "intent",
									"value": "STUDENT_SUBMISSION"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Gestión de Notificaciones",
			"item": [
				{
					"name": "Get Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 10 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test('La respuesta tiene los encabezados correctos', function () {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test('La respuesta es exitosa', function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Los datos de las notificaciones están presentes', function () {",
									"  const response = pm.response.json();",
									"  pm.expect(response).to.have.property('notifications');",
									"  pm.expect(response.notifications).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/notifications?user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"notifications"
							],
							"query": [
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Notification",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate valid timestamps for notification",
									"const now = Date.now();",
									"const startTime = now;",
									"const endTime = now + (1000 * 60 * 60 * 24); // 1 day from now",
									"",
									"// Create valid JSON body",
									"const requestBody = {",
									"  \"message\": \"Integration test notification - automated testing in progress\",",
									"  \"title\": \"Integration Test Notification\",",
									"  \"style\": \"INFO\",",
									"  \"targetUser\": \"INSTRUCTOR\",",
									"  \"startTimestamp\": startTime,",
									"  \"endTimestamp\": endTime",
									"};",
									"",
									"pm.request.body.raw = JSON.stringify(requestBody, null, 2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 10 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test('La respuesta tiene los encabezados correctos', function () {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test('Respuesta de creación de notificación', function () {",
									"  pm.expect([200, 201, 400]).to.include(pm.response.code);",
									"});",
									"",
									"pm.test('La respuesta de error tiene un mensaje', function () {",
									"  const response = pm.response.json();",
									"  pm.expect(response).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/webapi/notification?user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"notification"
							],
							"query": [
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Registros y Monitoreo",
			"item": [
				{
					"name": "Get Session Logs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 15 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(15000);",
									"});",
									"",
									"pm.test('La respuesta tiene los encabezados correctos', function () {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test('Validación de la estructura de la respuesta', function () {",
									"  if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.any.keys(['feedbackSessionLogEntries', 'logs', 'message', 'feedbackSessionLogs']);",
									"  } else {",
									"    pm.expect(pm.response.json()).to.have.property('message');",
									"  }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/logs/session?starttime={{past_timestamp}}&endtime={{current_timestamp}}&fslstarttime={{past_timestamp}}&fslendtime={{current_timestamp}}&user={{admin_user}}&courseid=jcordovas.uns-demo",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"logs",
								"session"
							],
							"query": [
								{
									"key": "starttime",
									"value": "{{past_timestamp}}"
								},
								{
									"key": "endtime",
									"value": "{{current_timestamp}}"
								},
								{
									"key": "fslstarttime",
									"value": "{{past_timestamp}}"
								},
								{
									"key": "fslendtime",
									"value": "{{current_timestamp}}"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								},
								{
									"key": "courseid",
									"value": "jcordovas.uns-demo"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Query Logs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 30 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									"",
									"pm.test('Validación de la estructura de la respuesta', function () {",
									"  const contentType = pm.response.headers.get('Content-Type');",
									"  ",
									"  if (contentType && contentType.includes('application/json')) {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.any.keys(['logEntries', 'logs', 'message']);",
									"  } else {",
									"    // Handle HTML error responses",
									"    pm.expect([200, 400, 500]).to.include(pm.response.code);",
									"  }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/logs/query?logtype=REQUEST&starttime={{past_timestamp}}&endtime={{current_timestamp}}&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"logs",
								"query"
							],
							"query": [
								{
									"key": "logtype",
									"value": "REQUEST"
								},
								{
									"key": "logevent",
									"value": "REQUEST_LOG",
									"disabled": true
								},
								{
									"key": "starttime",
									"value": "{{past_timestamp}}"
								},
								{
									"key": "endtime",
									"value": "{{current_timestamp}}"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Búsqueda y Utilidades",
			"item": [
				{
					"name": "Get Timezone (Relaxed Timeout)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es razonable (relajado)', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									"",
									"pm.test('Validación de la respuesta', function () {",
									"  // Accept both JSON and HTML responses",
									"  pm.expect([200, 500]).to.include(pm.response.code);",
									"});",
									"",
									"pm.test('Validación de la estructura de la respuesta', function () {",
									"  const contentType = pm.response.headers.get('Content-Type');",
									"  ",
									"  if (pm.response.code === 200 && contentType && contentType.includes('application/json')) {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.any.keys(['version', 'offsets', 'message']);",
									"  } else {",
									"    // Handle HTML error responses",
									"    pm.expect([200, 500]).to.include(pm.response.code);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/timezone?user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"timezone"
							],
							"query": [
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Test Exception Handling",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 10 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test('La respuesta tiene los encabezados correctos', function () {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test('La respuesta es exitosa', function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Respuesta de prueba de excepción', function () {",
									"  const response = pm.response.json();",
									"  pm.expect(response).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/exception?error=test&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"exception"
							],
							"query": [
								{
									"key": "error",
									"value": "test"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Health Check (HTML Handling)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El servicio es accesible', function () {",
									"  pm.expect([200, 302]).to.include(pm.response.code);",
									"});",
									"",
									"pm.test('Validación de la respuesta', function () {",
									"  const contentType = pm.response.headers.get('Content-Type');",
									"  ",
									"  if (contentType && contentType.includes('application/json')) {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('object');",
									"  } else {",
									"    // HTML response is acceptable for root endpoint",
									"    pm.expect(pm.response.text()).to.include.oneOf(['html', 'HTML', 'teammates', 'Modern']);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}?user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"query": [
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"exec": [
					"// Global pre-request script",
					"console.log('Starting request to:', pm.request.url.toString());",
					"",
					"// Add CSRF-Key for POST/PUT/DELETE requests",
					"if (['POST', 'PUT', 'DELETE'].includes(pm.request.method)) {",
					"  console.log('CSRF Key added for', pm.request.method, 'request');",
					"  pm.request.headers.add({",
					"    key: 'CSRF-Key',",
					"    value: pm.environment.get('csrf_token')",
					"  });",
					"}",
					"",
					"// Log headers",
					"console.log('Headers:', pm.request.headers.toJSON());",
					"",
					"// Set dynamic variables",
					"const now = Date.now();",
					"pm.environment.set('current_timestamp', now);",
					"pm.environment.set('future_timestamp', now + (7 * 24 * 60 * 60 * 1000));",
					"pm.environment.set('past_timestamp', now - (7 * 24 * 60 * 60 * 1000));",
					"",
					"// Set session timing variables",
					"pm.environment.set('session_start_time', now + (1000 * 60 * 60));",
					"pm.environment.set('session_end_time', now + (1000 * 60 * 60 * 24 * 7));",
					"",
					"// Generate dynamic test IDs",
					"if (!pm.environment.get('test_course_id')) {",
					"  pm.environment.set('test_course_id', `test-course-${Math.floor(Math.random() * 10000)}`);",
					"}",
					"if (!pm.environment.get('test_session_name')) {",
					"  pm.environment.set('test_session_name', `Test Session ${Math.floor(Math.random() * 1000)}`);",
					"}"
				],
				"type": "text/javascript"
			}
		}
	]
}