{
	"info": {
		"_postman_id": "c7cc9992-180f-4743-b26d-077b8555ab41",
		"name": "TEAMMATES Extended API Collection",
		"description": "Colección completa con todos los 111 endpoints del sistema TEAMMATES",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46689549",
		"_collection_link": "https://james-241604.postman.co/workspace/James's-Workspace~beaa361f-12f0-428c-8f55-39b86d312040/collection/46689549-c7cc9992-180f-4743-b26d-077b8555ab41?action=share&source=collection_link&creator=46689549"
	},
	"item": [
		{
			"name": "Gestión de Administrador",
			"item": [
				{
					"name": "GA-01 Get Account Info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Iniciando solicitud a:', '{{base_url}}/webapi/account?instructorid={{admin_user}}');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('⏱️  Tiempo de respuesta:', pm.response.responseTime + 'ms');",
									"console.log('Estado:', pm.response.status, pm.response.code);",
									"",
									"pm.test('El tiempo de respuesta es menor a 30 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									"",
									"pm.test('La respuesta tiene los encabezados correctos', function () {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"  pm.test('La respuesta es exitosa', function () {",
									"    pm.response.to.have.status(200);",
									"  });",
									"  ",
									"  const response = pm.response.json();",
									"  pm.test('Los datos de la cuenta están presentes', function () {",
									"    pm.expect(response).to.have.any.keys(['googleId', 'name', 'email', 'message']);",
									"  });",
									"} else {",
									"  pm.test('La respuesta de error tiene un mensaje', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('message');",
									"  });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/account?instructorid={{admin_user}}&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"account"
							],
							"query": [
								{
									"key": "instructorid",
									"value": "{{admin_user}}"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GA-02 Create Account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Creando nueva cuenta de usuario');",
									"",
									"const requestBody = {",
									"  googleId: 'test-account-' + Date.now(),",
									"  name: 'Test User Account',",
									"  email: 'test-account@teammates.com'",
									"};",
									"",
									"pm.request.body.raw = JSON.stringify(requestBody, null, 2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 30 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									"",
									"if (pm.response.code === 200 || pm.response.code === 201) {",
									"  pm.test('La cuenta fue creada exitosamente', function () {",
									"    pm.expect([200, 201]).to.include(pm.response.code);",
									"  });",
									"} else {",
									"  pm.test('La respuesta de error es válida', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 409, 422]);",
									"  });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/webapi/account?user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"account"
							],
							"query": [
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GA-03 Delete Account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Eliminando cuenta de usuario');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 30 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"  pm.test('La cuenta fue eliminada exitosamente', function () {",
									"    pm.response.to.have.status(200);",
									"  });",
									"} else {",
									"  pm.test('La respuesta de error es válida', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 403, 404]);",
									"  });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/account?googleid=test-account&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"account"
							],
							"query": [
								{
									"key": "googleid",
									"value": "test-account"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GA-04 Reset Account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Restableciendo cuenta de usuario');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 30 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									"",
									"pm.test('La respuesta es válida', function () {",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 400, 404, 500]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/account/reset?googleid={{admin_user}}&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"account",
								"reset"
							],
							"query": [
								{
									"key": "googleid",
									"value": "{{admin_user}}"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GA-05 Get Account Requests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Obteniendo solicitud de cuenta');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 30 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									"",
									"pm.test('La respuesta es válida', function () {",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 400, 404, 500]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/account/request?id=test-request-id&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"account",
								"request"
							],
							"query": [
								{
									"key": "id",
									"value": "test-request-id"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GA-06 Create Account Request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestBody = {",
									"  name: 'Test Account Request',",
									"  email: 'test-request@teammates.com',",
									"  institute: 'Test Institute',",
									"  country: 'Test Country',",
									"  comments: 'Test account request for API testing'",
									"};",
									"",
									"pm.request.body.raw = JSON.stringify(requestBody, null, 2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 30 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									"",
									"pm.test('La respuesta es válida', function () {",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 405, 409, 500]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/webapi/account/request?user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"account",
								"request"
							],
							"query": [
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GA-07 Get All Accounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 30 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									"",
									"pm.test('La respuesta tiene los encabezados correctos', function () {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test('La respuesta es exitosa', function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('El array de cuentas está presente', function () {",
									"  const response = pm.response.json();",
									"  pm.expect(response).to.have.property('accounts');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/accounts?useremail={{admin_user}}&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"accounts"
							],
							"query": [
								{
									"key": "useremail",
									"value": "{{admin_user}}"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GA-08 Get Ongoing Sessions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 30 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									"",
									"pm.test('La respuesta es exitosa', function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Los datos de sesiones están presentes', function () {",
									"  const response = pm.response.json();",
									"  pm.expect(response).to.have.property('sessions');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/sessions/ongoing?starttime=0&endtime=9999999999999&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"sessions",
								"ongoing"
							],
							"query": [
								{
									"key": "starttime",
									"value": "0"
								},
								{
									"key": "endtime",
									"value": "9999999999999"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GA-09 Get Usage Stats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 30 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									"",
									"pm.test('La respuesta es exitosa', function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Las estadísticas están presentes', function () {",
									"  const response = pm.response.json();",
									"  pm.expect(response).to.have.property('result');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/usagestats?starttime={{past_timestamp}}&endtime={{current_timestamp}}&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"usagestats"
							],
							"query": [
								{
									"key": "starttime",
									"value": "{{past_timestamp}}"
								},
								{
									"key": "endtime",
									"value": "{{current_timestamp}}"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GA-10 Get Action Classes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 30 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									"",
									"pm.test('La respuesta es exitosa', function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Las clases de acción están presentes', function () {",
									"  const response = pm.response.json();",
									"  pm.expect(response).to.have.property('actionClasses');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/actionclass?user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"actionclass"
							],
							"query": [
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GA-11 Get Auth Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 30 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									"",
									"pm.test('La respuesta es exitosa', function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('La información de autenticación está presente', function () {",
									"  const response = pm.response.json();",
									"  pm.expect(response).to.have.property('user');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/auth?user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"auth"
							],
							"query": [
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GA-12 Validate Reg Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 30 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									"",
									"pm.test('La respuesta es válida', function () {",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 400, 404, 500]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/auth/regkey?key=test-registration-key&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"auth",
								"regkey"
							],
							"query": [
								{
									"key": "key",
									"value": "test-registration-key"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Gestión de Cursos",
			"item": [
				{
					"name": "GC-01 Get Course Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 30 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"  pm.test('La respuesta es exitosa', function () {",
									"    pm.response.to.have.status(200);",
									"  });",
									"  ",
									"  const response = pm.response.json();",
									"  pm.test('Los datos del curso están presentes', function () {",
									"    pm.expect(response).to.have.property('courseId');",
									"  });",
									"} else {",
									"  pm.test('La respuesta de error es válida', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 404, 500]);",
									"  });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/course?courseid=test-course&entitytype=instructor&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"course"
							],
							"query": [
								{
									"key": "courseid",
									"value": "test-course"
								},
								{
									"key": "entitytype",
									"value": "instructor"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GC-02 Create Course",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestBody = {",
									"  courseId: 'test-course-' + Date.now(),",
									"  courseName: 'Test Course for API Testing',",
									"  timeZone: 'UTC'",
									"};",
									"",
									"pm.request.body.raw = JSON.stringify(requestBody, null, 2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 30 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									"",
									"pm.test('La respuesta es válida', function () {",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 405, 409, 500]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/webapi/course?user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"course"
							],
							"query": [
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GC-03 Update Course",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestBody = {",
									"  courseId: 'test-course',",
									"  courseName: 'Updated Test Course',",
									"  timeZone: 'UTC'",
									"};",
									"",
									"pm.request.body.raw = JSON.stringify(requestBody, null, 2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 30 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									"",
									"pm.test('La respuesta es válida', function () {",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 400, 404, 500]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/webapi/course?user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"course"
							],
							"query": [
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GC-04 Delete Course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 30 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									"",
									"pm.test('La respuesta es válida', function () {",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 400, 404, 500]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/course?courseid=test-course&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"course"
							],
							"query": [
								{
									"key": "courseid",
									"value": "test-course"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GC-05 Get All Courses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 30 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									"",
									"pm.test('La respuesta es exitosa', function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Los datos de cursos están presentes', function () {",
									"  const response = pm.response.json();",
									"  pm.expect(response).to.have.property('courses');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/courses?entitytype=instructor&coursestatus=active&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"courses"
							],
							"query": [
								{
									"key": "entitytype",
									"value": "instructor"
								},
								{
									"key": "coursestatus",
									"value": "active"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Gestión de Instructores",
			"item": [
				{
					"name": "GI-01 Get Instructors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('La respuesta es exitosa', function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Los instructores están presentes', function () {",
									"  const response = pm.response.json();",
									"  pm.expect(response).to.have.property('instructors');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/instructors?courseid={{test_course_id}}&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"instructors"
							],
							"query": [
								{
									"key": "courseid",
									"value": "{{test_course_id}}"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GI-02 Get Instructor By Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('La respuesta es válida', function () {",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 400, 404, 500]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/instructor?key=test-instructor-key&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"instructor"
							],
							"query": [
								{
									"key": "key",
									"value": "test-instructor-key"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GI-03 Create Instructor",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestBody = {",
									"  name: 'Test Instructor',",
									"  email: 'instructor@teammates.com',",
									"  courseId: pm.environment.get('test_course_id'),",
									"  isDisplayedToStudents: true",
									"};",
									"",
									"pm.request.body.raw = JSON.stringify(requestBody, null, 2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('La respuesta es válida', function () {",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 405, 409, 500]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/webapi/instructor?user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"instructor"
							],
							"query": [
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GI-04 Update Instructor",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestBody = {",
									"  name: 'Updated Test Instructor',",
									"  email: 'updated-instructor@teammates.com',",
									"  isDisplayedToStudents: false",
									"};",
									"",
									"pm.request.body.raw = JSON.stringify(requestBody, null, 2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('La respuesta es válida', function () {",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 400, 404, 500]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/webapi/instructor?courseid={{test_course_id}}&instructoremail=instructor@teammates.com&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"instructor"
							],
							"query": [
								{
									"key": "courseid",
									"value": "{{test_course_id}}"
								},
								{
									"key": "instructoremail",
									"value": "instructor@teammates.com"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GI-05 Delete Instructor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('La respuesta es válida', function () {",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 400, 404, 500]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/instructor?courseid={{test_course_id}}&instructoremail=instructor@teammates.com&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"instructor"
							],
							"query": [
								{
									"key": "courseid",
									"value": "{{test_course_id}}"
								},
								{
									"key": "instructoremail",
									"value": "instructor@teammates.com"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Gestión de Estudiantes",
			"item": [
				{
					"name": "GE-01 Get Students",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 30 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"  pm.test('La respuesta es exitosa', function () {",
									"    pm.response.to.have.status(200);",
									"  });",
									"  ",
									"  const response = pm.response.json();",
									"  pm.test('Los estudiantes están presentes', function () {",
									"    pm.expect(response).to.have.property('students');",
									"  });",
									"} else {",
									"  pm.test('La respuesta de error es válida', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 404, 500]);",
									"  });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/students?courseid={{test_course_id}}&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"students"
							],
							"query": [
								{
									"key": "courseid",
									"value": "{{test_course_id}}"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GE-02 Get Student By Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('La respuesta es válida', function () {",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 400, 404, 500]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/student?courseid={{test_course_id}}&studentemail=student@teammates.com&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"student"
							],
							"query": [
								{
									"key": "courseid",
									"value": "{{test_course_id}}"
								},
								{
									"key": "studentemail",
									"value": "student@teammates.com"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GE-03 Create Student",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestBody = {",
									"  name: 'Test Student',",
									"  email: 'student@teammates.com',",
									"  courseId: pm.environment.get('test_course_id'),",
									"  sectionName: 'Test Section',",
									"  teamName: 'Test Team'",
									"};",
									"",
									"pm.request.body.raw = JSON.stringify(requestBody, null, 2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('La respuesta es válida', function () {",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 405, 409, 500]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/webapi/student?user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"student"
							],
							"query": [
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GE-04 Update Student",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestBody = {",
									"  name: 'Updated Test Student',",
									"  email: 'updated-student@teammates.com',",
									"  sectionName: 'Updated Test Section',",
									"  teamName: 'Updated Test Team'",
									"};",
									"",
									"pm.request.body.raw = JSON.stringify(requestBody, null, 2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('La respuesta es válida', function () {",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 400, 404, 500]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/webapi/student?courseid={{test_course_id}}&studentemail=student@teammates.com&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"student"
							],
							"query": [
								{
									"key": "courseid",
									"value": "{{test_course_id}}"
								},
								{
									"key": "studentemail",
									"value": "student@teammates.com"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GE-05 Delete Student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('La respuesta es válida', function () {",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 400, 404, 500]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/student?courseid={{test_course_id}}&studentemail=student@teammates.com&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"student"
							],
							"query": [
								{
									"key": "courseid",
									"value": "{{test_course_id}}"
								},
								{
									"key": "studentemail",
									"value": "student@teammates.com"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Sesiones de Feedback",
			"item": [
				{
					"name": "GSR-01 Get Sessions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 30 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"  pm.test('La respuesta es exitosa', function () {",
									"    pm.response.to.have.status(200);",
									"  });",
									"  ",
									"  const response = pm.response.json();",
									"  pm.test('Las sesiones están presentes', function () {",
									"    pm.expect(response).to.have.property('feedbackSessions');",
									"  });",
									"} else {",
									"  pm.test('La respuesta de error es válida', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 404, 500]);",
									"  });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/sessions?courseid={{test_course_id}}&entitytype=instructor&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"sessions"
							],
							"query": [
								{
									"key": "courseid",
									"value": "{{test_course_id}}"
								},
								{
									"key": "entitytype",
									"value": "instructor"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GSR-02 Get Session By Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('La respuesta es válida', function () {",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 400, 404, 500]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/session?courseid={{test_course_id}}&fsname={{test_session_name}}&entitytype=instructor&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"session"
							],
							"query": [
								{
									"key": "courseid",
									"value": "{{test_course_id}}"
								},
								{
									"key": "fsname",
									"value": "{{test_session_name}}"
								},
								{
									"key": "entitytype",
									"value": "instructor"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GSR-03 Create Session",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestBody = {",
									"  feedbackSessionName: pm.environment.get('test_session_name'),",
									"  courseId: pm.environment.get('test_course_id'),",
									"  instructions: 'Test session for API testing',",
									"  submissionStartTimestamp: pm.environment.get('session_start_time'),",
									"  submissionEndTimestamp: pm.environment.get('session_end_time'),",
									"  gracePeriodMinutes: 15,",
									"  sessionVisibleSetting: 'AT_OPEN',",
									"  responseVisibleSetting: 'AT_VISIBLE',",
									"  submissionStatus: 'OPEN',",
									"  publishStatus: 'NOT_PUBLISHED'",
									"};",
									"",
									"pm.request.body.raw = JSON.stringify(requestBody, null, 2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('La respuesta es válida', function () {",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 405, 409, 500]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/webapi/session?user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"session"
							],
							"query": [
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Gestión de Preguntas",
			"item": [
				{
					"name": "GPR-01 Get Session Questions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 30 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"  pm.test('La respuesta es exitosa', function () {",
									"    pm.response.to.have.status(200);",
									"  });",
									"  ",
									"  const response = pm.response.json();",
									"  pm.test('Las preguntas están presentes', function () {",
									"    pm.expect(response).to.have.property('questions');",
									"  });",
									"} else {",
									"  pm.test('La respuesta de error es válida', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 404, 500]);",
									"  });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/questions?courseid={{test_course_id}}&fsname={{test_session_name}}&entitytype=instructor&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"questions"
							],
							"query": [
								{
									"key": "courseid",
									"value": "{{test_course_id}}"
								},
								{
									"key": "fsname",
									"value": "{{test_session_name}}"
								},
								{
									"key": "entitytype",
									"value": "instructor"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GPR-02 Create Question",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestBody = {",
									"  questionNumber: 1,",
									"  questionType: 'TEXT',",
									"  questionBrief: 'Test Question',",
									"  questionDescription: 'This is a test question for API testing',",
									"  customNumberOfEntitiesToGiveFeedbackToSetting: 'UNLIMITED',",
									"  showResponsesTo: ['INSTRUCTORS'],",
									"  showGiverNameTo: ['INSTRUCTORS'],",
									"  showRecipientNameTo: ['INSTRUCTORS']",
									"};",
									"",
									"pm.request.body.raw = JSON.stringify(requestBody, null, 2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('La respuesta es válida', function () {",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 405, 409, 500]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/webapi/question?courseid={{test_course_id}}&fsname={{test_session_name}}&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"question"
							],
							"query": [
								{
									"key": "courseid",
									"value": "{{test_course_id}}"
								},
								{
									"key": "fsname",
									"value": "{{test_session_name}}"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Gestión de Respuestas",
			"item": [
				{
					"name": "GPR-03 Get Responses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 30 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"  pm.test('La respuesta es exitosa', function () {",
									"    pm.response.to.have.status(200);",
									"  });",
									"  ",
									"  const response = pm.response.json();",
									"  pm.test('Las respuestas están presentes', function () {",
									"    pm.expect(response).to.have.property('responses');",
									"  });",
									"} else {",
									"  pm.test('La respuesta de error es válida', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 404, 500]);",
									"  });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/responses?courseid={{test_course_id}}&fsname={{test_session_name}}&entitytype=instructor&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"responses"
							],
							"query": [
								{
									"key": "courseid",
									"value": "{{test_course_id}}"
								},
								{
									"key": "fsname",
									"value": "{{test_session_name}}"
								},
								{
									"key": "entitytype",
									"value": "instructor"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GPR-04 Submit Responses",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestBody = {",
									"  intent: 'STUDENT_SUBMISSION',",
									"  responses: [{",
									"    feedbackQuestionId: 'test-question-id',",
									"    recipient: 'student@teammates.com',",
									"    responseDetails: {",
									"      answer: 'This is a test response'",
									"    }",
									"  }]",
									"};",
									"",
									"pm.request.body.raw = JSON.stringify(requestBody, null, 2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('La respuesta es válida', function () {",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 404]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/webapi/response?courseid={{test_course_id}}&fsname={{test_session_name}}&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"response"
							],
							"query": [
								{
									"key": "courseid",
									"value": "{{test_course_id}}"
								},
								{
									"key": "fsname",
									"value": "{{test_session_name}}"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Gestión de Comentarios",
			"item": [
				{
					"name": "GPR-05 Get Comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('La respuesta es válida', function () {",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 400, 404, 500]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/responsecomments?courseid={{test_course_id}}&fsname={{test_session_name}}&entitytype=instructor&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"responsecomments"
							],
							"query": [
								{
									"key": "courseid",
									"value": "{{test_course_id}}"
								},
								{
									"key": "fsname",
									"value": "{{test_session_name}}"
								},
								{
									"key": "entitytype",
									"value": "instructor"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GPR-06 Create Comment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestBody = {",
									"  commentText: 'This is a test comment for API testing',",
									"  showCommentTo: ['INSTRUCTORS'],",
									"  showGiverNameTo: ['INSTRUCTORS']",
									"};",
									"",
									"pm.request.body.raw = JSON.stringify(requestBody, null, 2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('La respuesta es válida', function () {",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 404]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/webapi/responsecomment?courseid={{test_course_id}}&fsname={{test_session_name}}&questionnum=1&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"responsecomment"
							],
							"query": [
								{
									"key": "courseid",
									"value": "{{test_course_id}}"
								},
								{
									"key": "fsname",
									"value": "{{test_session_name}}"
								},
								{
									"key": "questionnum",
									"value": "1"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Gestión de Notificaciones",
			"item": [
				{
					"name": "GN-01 Get All Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('La respuesta es exitosa', function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Las notificaciones están presentes', function () {",
									"  const response = pm.response.json();",
									"  pm.expect(response).to.have.property('notifications');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/notifications?user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"notifications"
							],
							"query": [
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GN-02 Create Notification",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestBody = {",
									"  title: 'Test Notification',",
									"  message: 'This is a test notification for API testing',",
									"  type: 'INFO',",
									"  targetUser: 'ALL',",
									"  style: 'SUCCESS',",
									"  startTimestamp: Date.now(),",
									"  endTimestamp: Date.now() + (7 * 24 * 60 * 60 * 1000)",
									"};",
									"",
									"pm.request.body.raw = JSON.stringify(requestBody, null, 2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('La respuesta es válida', function () {",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 404]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/webapi/notification?user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"notification"
							],
							"query": [
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Registros y Monitoreo",
			"item": [
				{
					"name": "RM-01 Get Session Logs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 15 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(15000);",
									"});",
									"",
									"pm.test('La respuesta tiene los encabezados correctos', function () {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test('Validación de la estructura de la respuesta', function () {",
									"  if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.any.keys(['feedbackSessionLogEntries', 'logs', 'message', 'feedbackSessionLogs']);",
									"  } else {",
									"    pm.expect(pm.response.json()).to.have.property('message');",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Iniciando consulta de logs de sesión');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/logs/session?starttime={{past_timestamp}}&endtime={{current_timestamp}}&fslstarttime={{past_timestamp}}&fslendtime={{current_timestamp}}&user={{admin_user}}&courseid=jcordovas.uns-demo",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"logs",
								"session"
							],
							"query": [
								{
									"key": "starttime",
									"value": "{{past_timestamp}}"
								},
								{
									"key": "endtime",
									"value": "{{current_timestamp}}"
								},
								{
									"key": "fslstarttime",
									"value": "{{past_timestamp}}"
								},
								{
									"key": "fslendtime",
									"value": "{{current_timestamp}}"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								},
								{
									"key": "courseid",
									"value": "jcordovas.uns-demo"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "RM-02 Query System Logs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 30 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									"",
									"pm.test('Validación de la estructura de la respuesta', function () {",
									"  const contentType = pm.response.headers.get('Content-Type');",
									"  ",
									"  if (contentType && contentType.includes('application/json')) {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.any.keys(['logEntries', 'logs', 'message']);",
									"  } else {",
									"    // Handle HTML error responses",
									"    pm.expect([200, 400, 500]).to.include(pm.response.code);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Iniciando consulta de logs del sistema');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/logs/query?logtype=REQUEST&starttime={{past_timestamp}}&endtime={{current_timestamp}}&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"logs",
								"query"
							],
							"query": [
								{
									"key": "logtype",
									"value": "REQUEST"
								},
								{
									"key": "starttime",
									"value": "{{past_timestamp}}"
								},
								{
									"key": "endtime",
									"value": "{{current_timestamp}}"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Búsqueda y Utilidades",
			"item": [
				{
					"name": "BU-01 Get Timezones",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es razonable (relajado)', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(30000);",
									"});",
									"",
									"pm.test('Validación de la respuesta', function () {",
									"  // Accept both JSON and HTML responses",
									"  pm.expect([200, 500]).to.include(pm.response.code);",
									"});",
									"",
									"pm.test('Validación de la estructura de la respuesta', function () {",
									"  const contentType = pm.response.headers.get('Content-Type');",
									"  ",
									"  if (pm.response.code === 200 && contentType && contentType.includes('application/json')) {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.any.keys(['version', 'offsets', 'message']);",
									"  } else {",
									"    // Handle HTML error responses",
									"    pm.expect([200, 500]).to.include(pm.response.code);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Iniciando solicitud de timezone');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/timezone?user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"timezone"
							],
							"query": [
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BU-02 Test Exception",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El tiempo de respuesta es menor a 10 segundos', function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test('La respuesta tiene los encabezados correctos', function () {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test('La respuesta es exitosa', function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Respuesta de prueba de excepción', function () {",
									"  const response = pm.response.json();",
									"  pm.expect(response).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Iniciando prueba de excepción');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/exception?error=test&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"exception"
							],
							"query": [
								{
									"key": "error",
									"value": "test"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BU-03 Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('El servicio es accesible', function () {",
									"  pm.expect([200, 302]).to.include(pm.response.code);",
									"});",
									"",
									"pm.test('Validación de la respuesta', function () {",
									"  const contentType = pm.response.headers.get('Content-Type');",
									"  ",
									"  if (contentType && contentType.includes('application/json')) {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('object');",
									"  } else {",
									"    // HTML response is acceptable for root endpoint",
									"    pm.expect(pm.response.text()).to.include.oneOf(['html', 'HTML', 'teammates', 'Modern']);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Iniciando health check');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}?user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"query": [
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BU-04 Create Account Request Alt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('La respuesta es válida', function () {",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 404, 405, 409, 500]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Backup Account Request\",\n  \"email\": \"backup@teammates.com\",\n  \"institute\": \"Backup Institute\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/webapi/accountrequest?user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"accountrequest"
							],
							"query": [
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BU-05 Approve Account Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('La respuesta es válida', function () {",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 400, 404, 500]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/webapi/accountrequest/approve?id=test-request-id&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"accountrequest",
								"approve"
							],
							"query": [
								{
									"key": "id",
									"value": "test-request-id"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BU-06 Reject Account Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('La respuesta es válida', function () {",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 400, 404, 500]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Backdoor-Key",
								"value": "{{backdoor_key}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"reasonBody\": \"Request rejected for API testing\",\n  \"reasonTitle\": \"Test Rejection\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/webapi/accountrequest/reject?id=test-request-id&user={{admin_user}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"webapi",
								"accountrequest",
								"reject"
							],
							"query": [
								{
									"key": "id",
									"value": "test-request-id"
								},
								{
									"key": "user",
									"value": "{{admin_user}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"exec": [
					"// Global pre-request script",
					"console.log('Starting request to:', pm.request.url.toString());",
					"",
					"// Add CSRF-Key for POST/PUT/DELETE requests",
					"if (['POST', 'PUT', 'DELETE'].includes(pm.request.method)) {",
					"  console.log('CSRF Key added for', pm.request.method, 'request');",
					"  pm.request.headers.add({",
					"    key: 'CSRF-Key',",
					"    value: pm.environment.get('csrf_token')",
					"  });",
					"}",
					"",
					"// Log headers",
					"console.log('Headers:', pm.request.headers.toJSON());",
					"",
					"// Set dynamic variables",
					"const now = Date.now();",
					"pm.environment.set('current_timestamp', now);",
					"pm.environment.set('future_timestamp', now + (7 * 24 * 60 * 60 * 1000));",
					"pm.environment.set('past_timestamp', now - (7 * 24 * 60 * 60 * 1000));",
					"",
					"// Set session timing variables",
					"pm.environment.set('session_start_time', now + (1000 * 60 * 60));",
					"pm.environment.set('session_end_time', now + (1000 * 60 * 60 * 24 * 7));",
					"",
					"// Generate dynamic test IDs",
					"if (!pm.environment.get('test_course_id')) {",
					"  pm.environment.set('test_course_id', `test-course-${Math.floor(Math.random() * 10000)}`);",
					"}",
					"if (!pm.environment.get('test_session_name')) {",
					"  pm.environment.set('test_session_name', `Test Session ${Math.floor(Math.random() * 1000)}`);",
					"}"
				],
				"type": "text/javascript"
			}
		}
	]
}